Name: Optimize video drawing
Author: Adrian Siekierka <kontakt@asie.pl>

VideoWriteText sub-methods reorganized. CGA snow is now only being avoided on
CGA cards, which should boost performance on most DOS machines.

Other size optimizations done, so the code size effect should be negligible.

--- src.orig/SRC/VIDEO.PAS	2020-03-16 14:53:28.666824692 +0100
+++ src/SRC/VIDEO.PAS	2020-03-20 18:08:34.648466380 +0100
@@ -36,10 +36,6 @@ interface
 		VideoWriteText: TVideoWriteTextProc;
 		VideoMonochrome: boolean;
 	function VideoConfigure: boolean;
-	procedure VideoWriteTextCO80(x, y, color: byte; text: TVideoLine);
-	procedure VideoWriteTextCO40(x, y, color: byte; text: TVideoLine);
-	procedure VideoWriteTextBW80(x, y, color: byte; text: TVideoLine);
-	procedure VideoWriteTextBW40(x, y, color: byte; text: TVideoLine);
 	procedure VideoInstall(columns, borderColor: integer);
 	procedure VideoUninstall;
 	procedure VideoShowCursor;
@@ -55,14 +51,18 @@ var
 	VideoTextSegment: word;
 	VideoTextPointer: pointer;
 	VideoCursorVisible: boolean;
+	VideoEGAInstalled: boolean;
+	VideoMDAInstalled: boolean;
 
-procedure VideoWriteTextCO80(x, y, color: byte; text: TVideoLine);
+{$F+}
+
+procedure VideoWriteTextEGA(x, y, color: byte; text: TVideoLine);
 	begin
 		inline(
 			$1E/                 { PUSH DS }
 			$1E/                 { PUSH DS }
 			$8A/$86/y/           { MOV AL, byte ptr [BP + y] }
-			$B3/$50/             { MOV BL, 0x50 }
+			$8A/$1E/VideoColumns/{ MOV BX, VideoColumns }
 			$F6/$E3/             { MUL BL }
 			$2B/$DB/             { SUB BX, BX }
 			$8A/$9E/x/           { MOV BL, byte ptr [BP + x] }
@@ -73,55 +73,45 @@ procedure VideoWriteTextCO80(x, y, color
 			$8A/$BE/color/       { MOV BH, byte ptr [BP + color] }
 			$8A/$8E/text/        { MOV CL, byte ptr [BP + text] }
 			$22/$C9/             { AND CL, CL }
-			$74/$3E/             { JZ label_0084 }
+			$74/$33/             { JZ label_0079 }
 			$2B/$C0/             { SUB AX, AX }
 			$8E/$D8/             { MOV DS, AX }
 			$A0/$0449/           { MOV AL, [BiosBDA.VideoMode] }
 			$1F/                 { POP DS }
 			$2C/$07/             { SUB AL, 0x7 }
-			$74/$22/             { JZ label_0074 }
+			$74/$17/             { JZ label_0069 }
 			$BA/$B800/           { MOV DX, 0xB800 }
 			$8E/$DA/             { MOV DS, DX }
 			$BA/$03DA/           { MOV DX, 0x03DA }
 			{ label_005a }
 			$46/                 { INC SI }
 			$8A/$9A/text/        { MOV BL, byte ptr [BP + SI + text] }
-			{ label_005f }
-			$EC/                 { IN AL, DX }
-			$A8/$01/             { TEST AL, 0x1 }
-			$75/$FB/             { JNZ label_005f }
-			$FA/                 { CLI }
-			{ label_0065 }
-			$EC/                 { IN AL, DX }
-			$A8/$01/             { TEST AL, 0x1 }
-			$74/$FB/             { JZ label_0065 }
 			$89/$1D/             { MOV word ptr [bufIdx], BX }
 			$47/$47/             { INC bufIdx x 2 }
-			$E2/$EA/             { LOOP label_005a }
+			$E2/$F5/             { LOOP label_005a }
 			$2A/$C0/             { SUB AL, AL }
-			$74/$10/             { JZ label_0084 }
-			{ label_0074 }
+			$74/$10/             { JZ label_0079 }
+			{ label_0069 }
 			$BA/$B000/           { MOV DX, 0xB000 }
 			$8E/$DA/             { MOV DS, DX }
-			{ label_0079 }
+			{ label_006e }
 			$46/                 { INC SI }
 			$8A/$9A/text/        { MOV BL, byte ptr [BP + SI + text] }
 			$89/$1D/             { MOV word ptr [bufIdx], BX }
 			$47/$47/             { INC bufIdx x 2 }
-			$E2/$F5/             { LOOP label_0079 }
-			{ label_0084 }
-			$1F/                 { POP DS }
-			$FB                  { STI }
+			$E2/$F5/             { LOOP label_006e }
+			{ label_0079 }
+			$1F                  { POP DS }
 		);
 	end;
 
-procedure VideoWriteTextCO40(x, y, color: byte; text: TVideoLine);
+procedure VideoWriteTextCGA(x, y, color: byte; text: TVideoLine);
 	begin
 		inline(
 			$1E/                 { PUSH DS }
 			$1E/                 { PUSH DS }
 			$8A/$86/y/           { MOV AL, byte ptr [BP + y] }
-			$B3/$28/             { MOV BL, 0x28 }
+			$8A/$1E/VideoColumns/{ MOV BX, VideoColumns }
 			$F6/$E3/             { MUL BL }
 			$2B/$DB/             { SUB BX, BX }
 			$8A/$9E/x/           { MOV BL, byte ptr [BP + x] }
@@ -174,7 +164,7 @@ procedure VideoWriteTextCO40(x, y, color
 		);
 	end;
 
-procedure VideoWriteTextBW80(x, y, color: byte; text: TVideoLine);
+procedure VideoWriteTextMonoEGA(x, y, color: byte; text: TVideoLine);
 	begin
 		if (color and $08) = $08 then begin
 			if (color and $F0) = 0 then
@@ -187,64 +177,10 @@ procedure VideoWriteTextBW80(x, y, color
 			else
 				color := $70;
 		end;
-		inline(
-			$1E/                 { PUSH DS }
-			$1E/                 { PUSH DS }
-			$8A/$86/y/           { MOV AL, byte ptr [BP + y] }
-			$B3/$50/             { MOV BL, 0x50 }
-			$F6/$E3/             { MUL BL }
-			$2B/$DB/             { SUB BX, BX }
-			$8A/$9E/x/           { MOV BL, byte ptr [BP + x] }
-			$03/$C3/             { ADD AX, BX }
-			$03/$C0/             { ADD AX, AX }
-			$8B/$F8/             { MOV DI, AX }
-			$BE/$00/$00/         { MOV SI, 0x0 }
-			$8A/$BE/color/       { MOV BH, byte ptr [BP + color] }
-			$8A/$8E/text/        { MOV CL, byte ptr [BP + text] }
-			$22/$C9/             { AND CL, CL }
-			$74/$3E/             { JZ label_0084 }
-			$2B/$C0/             { SUB AX, AX }
-			$8E/$D8/             { MOV DS, AX }
-			$A0/$0449/           { MOV AL, [BiosBDA.VideoMode] }
-			$1F/                 { POP DS }
-			$2C/$07/             { SUB AL, 0x7 }
-			$74/$22/             { JZ label_0074 }
-			$BA/$B800/           { MOV DX, 0xB800 }
-			$8E/$DA/             { MOV DS, DX }
-			$BA/$03DA/           { MOV DX, 0x03DA }
-			{ label_005a }
-			$46/                 { INC SI }
-			$8A/$9A/text/        { MOV BL, byte ptr [BP + SI + text] }
-			{ label_005f }
-			$EC/                 { IN AL, DX }
-			$A8/$01/             { TEST AL, 0x1 }
-			$75/$FB/             { JNZ label_005f }
-			$FA/                 { CLI }
-			{ label_0065 }
-			$EC/                 { IN AL, DX }
-			$A8/$01/             { TEST AL, 0x1 }
-			$74/$FB/             { JZ label_0065 }
-			$89/$1D/             { MOV word ptr [bufIdx], BX }
-			$47/$47/             { INC bufIdx x 2 }
-			$E2/$EA/             { LOOP label_005a }
-			$2A/$C0/             { SUB AL, AL }
-			$74/$10/             { JZ label_0084 }
-			{ label_0074 }
-			$BA/$B000/           { MOV DX, 0xB000 }
-			$8E/$DA/             { MOV DS, DX }
-			{ label_0079 }
-			$46/                 { INC SI }
-			$8A/$9A/text/        { MOV BL, byte ptr [BP + SI + text] }
-			$89/$1D/             { MOV word ptr [bufIdx], BX }
-			$47/$47/             { INC bufIdx x 2 }
-			$E2/$F5/             { LOOP label_0079 }
-			{ label_0084 }
-			$1F/                 { POP DS }
-			$FB                  { STI }
-		);
+		VideoWriteTextEGA(x, y, color, text);
 	end;
 
-procedure VideoWriteTextBW40(x, y, color: byte; text: TVideoLine);
+procedure VideoWriteTextMonoCGA(x, y, color: byte; text: TVideoLine);
 	begin
 		if (color and $08) = $08 then begin
 			if (color and $F0) = 0 then
@@ -257,61 +193,7 @@ procedure VideoWriteTextBW40(x, y, color
 			else
 				color := $70;
 		end;
-		inline(
-			$1E/                 { PUSH DS }
-			$1E/                 { PUSH DS }
-			$8A/$86/y/           { MOV AL, byte ptr [BP + y] }
-			$B3/$28/             { MOV BL, 0x28 }
-			$F6/$E3/             { MUL BL }
-			$2B/$DB/             { SUB BX, BX }
-			$8A/$9E/x/           { MOV BL, byte ptr [BP + x] }
-			$03/$C3/             { ADD AX, BX }
-			$03/$C0/             { ADD AX, AX }
-			$8B/$F8/             { MOV DI, AX }
-			$BE/$00/$00/         { MOV SI, 0x0 }
-			$8A/$BE/color/       { MOV BH, byte ptr [BP + color] }
-			$8A/$8E/text/        { MOV CL, byte ptr [BP + text] }
-			$22/$C9/             { AND CL, CL }
-			$74/$3E/             { JZ label_0084 }
-			$2B/$C0/             { SUB AX, AX }
-			$8E/$D8/             { MOV DS, AX }
-			$A0/$0449/           { MOV AL, [BiosBDA.VideoMode] }
-			$1F/                 { POP DS }
-			$2C/$07/             { SUB AL, 0x7 }
-			$74/$22/             { JZ label_0074 }
-			$BA/$B800/           { MOV DX, 0xB800 }
-			$8E/$DA/             { MOV DS, DX }
-			$BA/$03DA/           { MOV DX, 0x03DA }
-			{ label_005a }
-			$46/                 { INC SI }
-			$8A/$9A/text/        { MOV BL, byte ptr [BP + SI + text] }
-			{ label_005f }
-			$EC/                 { IN AL, DX }
-			$A8/$01/             { TEST AL, 0x1 }
-			$75/$FB/             { JNZ label_005f }
-			$FA/                 { CLI }
-			{ label_0065 }
-			$EC/                 { IN AL, DX }
-			$A8/$01/             { TEST AL, 0x1 }
-			$74/$FB/             { JZ label_0065 }
-			$89/$1D/             { MOV word ptr [bufIdx], BX }
-			$47/$47/             { INC bufIdx x 2 }
-			$E2/$EA/             { LOOP label_005a }
-			$2A/$C0/             { SUB AL, AL }
-			$74/$10/             { JZ label_0084 }
-			{ label_0074 }
-			$BA/$B000/           { MOV DX, 0xB000 }
-			$8E/$DA/             { MOV DS, DX }
-			{ label_0079 }
-			$46/                 { INC SI }
-			$8A/$9A/text/        { MOV BL, byte ptr [BP + SI + text] }
-			$89/$1D/             { MOV word ptr [bufIdx], BX }
-			$47/$47/             { INC bufIdx x 2 }
-			$E2/$F5/             { LOOP label_0079 }
-			{ label_0084 }
-			$1F/                 { POP DS }
-			$FB                  { STI }
-		);
+		VideoWriteTextCGA(x, y, color, text);
 	end;
 
 function VideoConfigure: boolean;
@@ -320,7 +202,6 @@ function VideoConfigure: boolean;
 	begin
 		charTyped := ' ';
 		if LastMode = 7 then begin
-			VideoWriteText := VideoWriteTextBW80;
 			VideoMonochrome := true;
 		end else begin
 			Writeln;
@@ -342,9 +223,17 @@ procedure VideoInstall(columns, borderCo
 	var
 		regs: Registers;
 	begin
-		regs.AX := $1201;
-		regs.BL := $30;
+		regs.AH := $12;
+		regs.BX := $FF10;
 		Intr($10, regs);
+		VideoEGAInstalled := regs.BH <> $FF;
+		VideoMDAInstalled := LastMode = 7;
+
+		if VideoEGAInstalled then begin
+			regs.AX := $1201;
+			regs.BL := $30;
+			Intr($10, regs);
+		end;
 
 		if not VideoMonochrome then
 			TextBackground(borderColor);
@@ -354,28 +243,35 @@ procedure VideoInstall(columns, borderCo
 			if LastMode in [0, 1, 2, 3] then begin
 				if columns = 80 then begin
 					TextMode(BW80);
-					VideoWriteText := VideoWriteTextBW80;
 				end else begin
 					TextMode(BW40);
-					VideoWriteText := VideoWriteTextBW40;
 				end;
 			end else begin
-				VideoWriteText := VideoWriteTextBW80;
 				TextMode(7);
 				VideoColumns := 80;
 			end;
 		end else begin
 			if VideoColumns = 80 then begin
 				TextMode(CO80);
-				VideoWriteText := VideoWriteTextCO80;
 			end else begin
 				TextMode(CO40);
-				VideoWriteText := VideoWriteTextCO40;
 			end;
-			if not VideoMonochrome then
-				TextBackground(borderColor);
-			ClrScr;
+			TextBackground(borderColor);
 		end;
+
+		ClrScr;
+		if VideoEGAInstalled or VideoMDAInstalled then begin
+			if VideoMonochrome then
+				VideoWriteText := VideoWriteTextMonoEGA
+			else
+				VideoWriteText := VideoWriteTextEGA;
+		end else begin
+			if VideoMonochrome then
+				VideoWriteText := VideoWriteTextMonoCGA
+			else
+				VideoWriteText := VideoWriteTextCGA;
+		end;
+
 		if not VideoCursorVisible then
 			VideoHideCursor;
 		VideoSetBorderColor(borderColor);
@@ -385,9 +281,12 @@ procedure VideoUninstall;
 	var
 		regs: Registers;
 	begin
-		regs.AX := $1201;
-		regs.BL := $30;
-		Intr($10, regs);
+		if VideoEGAInstalled then begin
+			regs.AX := $1201;
+			regs.BL := $30;
+			Intr($10, regs);
+		end;
+
 		TextBackground(0);
 		VideoColumns := 80;
 		if VideoMonochrome then
@@ -430,7 +329,9 @@ procedure VideoMove(x, y, chars: integer
 		offset: integer;
 	begin
 		offset := (y * VideoColumns + x) * 2;
-		VideoWriteTextCO80(0, 0, 0, '');
+		{ avoid snow }
+		if not VideoEGAInstalled and not VideoMDAInstalled then
+			VideoWriteTextCGA(0, 0, 0, '');
 		if toVideo then
 			Move(data^, Ptr(VideoTextSegment, offset)^, chars * 2)
 		else
@@ -441,7 +342,7 @@ procedure VideoMove(x, y, chars: integer
 begin
 	VideoBorderColor := 0;
 	VideoColumns := 80;
-	VideoWriteText := VideoWriteTextBW80;
+	VideoWriteText := VideoWriteTextCGA;
 	if LastMode = 7 then begin
 		VideoTextSegment := $B000;
 		VideoMonochrome := true;
