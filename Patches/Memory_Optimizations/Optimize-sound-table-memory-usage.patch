Name: Optimize memory usage: sound tables
Author: Adrian Siekierka <kontakt@asie.pl>

Hard-coding sound tables, reducing their in-memory size and removing the
initialization code (complete with floating-point routines!) saves about
6-7 KB of runtime memory usage, as well as makes the output executable
slightly smaller.

diff -Nrup src.orig/SRC/SNDFREQ.INC src/SRC/SNDFREQ.INC
--- src.orig/SRC/SNDFREQ.INC	1970-01-01 01:00:00.000000000 +0100
+++ src/SRC/SNDFREQ.INC	2020-03-16 14:53:19.308825296 +0100
@@ -0,0 +1,21 @@
+const
+	SoundFreqTable: array[16 .. 111] of word = (
+		64,	67,	71,	76,	80,	85,	90,	95,	101,	107,	114,	120,	0,	0,	0,	0,	
+		128,	135,	143,	152,	161,	170,	181,	191,	203,	215,	228,	241,	0,	0,	0,	0,	
+		256,	271,	287,	304,	322,	341,	362,	383,	406,	430,	456,	483,	0,	0,	0,	0,	
+		512,	542,	574,	608,	645,	683,	724,	767,	812,	861,	912,	966,	0,	0,	0,	0,	
+		1024,	1084,	1149,	1217,	1290,	1366,	1448,	1534,	1625,	1722,	1824,	1933,	0,	0,	0,	0,	
+		2048,	2169,	2298,	2435,	2580,	2733,	2896,	3068,	3250,	3444,	3649,	3866,	0,	0,	0,	0
+	);
+	SoundDrumTable: array[0 .. 9] of TDrumData = (
+		(Len:  1; Data: (3200,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0)),
+		(Len: 14; Data: (1100,	1200,	1300,	1400,	1500,	1600,	1700,	1800,	1900,	2000,	2100,	2200,	2300,	2400,	0)),
+		(Len: 14; Data: (4800,	4800,	8000,	1600,	4800,	4800,	8000,	1600,	4800,	4800,	8000,	1600,	4800,	4800,	8000)),
+		(Len: 14; Data: (0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0)),
+		(Len: 14; Data: (500,	2556,	1929,	3776,	3386,	4517,	1385,	1103,	4895,	3396,	874,	1616,	5124,	606,	0)),
+		(Len: 14; Data: (1600,	1514,	1600,	821,	1600,	1715,	1600,	911,	1600,	1968,	1600,	1490,	1600,	1722,	1600)),
+		(Len: 14; Data: (2200,	1760,	1760,	1320,	2640,	880,	2200,	1760,	1760,	1320,	2640,	880,	2200,	1760,	0)),
+		(Len: 14; Data: (688,	676,	664,	652,	640,	628,	616,	604,	592,	580,	568,	556,	544,	532,	0)),
+		(Len: 14; Data: (1207,	1224,	1163,	1127,	1159,	1236,	1269,	1314,	1127,	1224,	1320,	1332,	1257,	1327,	0)),
+		(Len: 14; Data: (378,	331,	316,	230,	224,	384,	480,	320,	358,	412,	376,	621,	554,	426,	0))
+	);
diff -Nrup src.orig/SRC/SOUNDS.PAS src/SRC/SOUNDS.PAS
--- src.orig/SRC/SOUNDS.PAS	2020-03-16 14:53:28.666824692 +0100
+++ src/SRC/SOUNDS.PAS	2020-03-16 14:49:32.788839925 +0100
@@ -29,13 +29,12 @@ interface
 	type
 		TDrumData = record
 			Len: integer;
-			Data: array[1 .. 255] of word;
+			Data: array[1 .. 15] of word;
 		end;
 	var
 		SoundEnabled: boolean;
 		SoundBlockQueueing: boolean;
 		SoundCurrentPriority: integer;
-		SoundFreqTable: array[1 .. 255] of word;
 		SoundDurationMultiplier: byte;
 		SoundDurationCounter: byte;
 		SoundBuffer: string;
@@ -47,7 +46,6 @@ interface
 		UseSystemTimeForElapsed: boolean;
 		TimerTicks: word;
 		SoundTimeCheckHsec: integer;
-		SoundDrumTable: array[0 .. 9] of TDrumData;
 	procedure SoundQueue(priority: integer; pattern: string);
 	procedure SoundClearQueue;
 	function SoundHasTimeElapsed(var counter: integer; duration: integer): boolean;
@@ -57,6 +55,8 @@ interface
 implementation
 uses Crt, Dos;
 
+{$I SNDFREQ.INC}
+
 procedure SoundQueue(priority: integer; pattern: string);
 	begin
 		if not SoundBlockQueueing and
@@ -85,51 +85,6 @@ procedure SoundClearQueue;
 		NoSound;
 	end;
 
-procedure SoundInitFreqTable;
-	var
-		octave, note: integer;
-		freqC1, noteStep, noteBase, ln2: real;
-	begin
-		freqC1 := 32.0;
-		ln2 := Ln(2.0);
-		noteStep := Exp(ln2 / 12.0);
-		for octave := 1 to 15 do begin
-			noteBase := Exp(octave * ln2) * freqC1;
-			for note := 0 to 11 do begin
-				SoundFreqTable[octave * 16 + note] := Trunc(noteBase);
-				noteBase := noteBase * noteStep;
-			end;
-		end;
-	end;
-
-procedure SoundInitDrumTable;
-	var
-		i: integer;
-	begin
-		SoundDrumTable[0].Len := 1;
-		SoundDrumTable[0].Data[1] := 3200;
-		for i := 1 to 9 do
-			SoundDrumTable[i].Len := 14;
-		for i := 1 to 14 do
-			SoundDrumTable[1].Data[i] := i * 100 + 1000;
-		for i := 1 to 16 do
-			SoundDrumTable[2].Data[i] := (i mod 2) * 1600 + 1600 + (i mod 4) * 1600;
-		for i := 1 to 14 do
-			SoundDrumTable[4].Data[i] := Random(5000) + 500;
-		for i := 1 to 8 do begin
-			SoundDrumTable[5].Data[i * 2 - 1] := 1600;
-			SoundDrumTable[5].Data[i * 2] := Random(1600) + 800;
-		end;
-		for i := 1 to 14 do
-			SoundDrumTable[6].Data[i] := ((i mod 2) * 880) + 880 + ((i mod 3) * 440);
-		for i := 1 to 14 do
-			SoundDrumTable[7].Data[i] := 700 - (i * 12);
-		for i := 1 to 14 do
-			SoundDrumTable[8].Data[i] := (i * 20 + 1200) - Random(i * 40);
-		for i := 1 to 14 do
-			SoundDrumTable[9].Data[i] := Random(440) + 220;
-	end;
-
 procedure SoundPlayDrum(var drum: TDrumData);
 	var
 		i: integer;
@@ -200,12 +155,12 @@ procedure SoundTimerHandler;
 					NoSound;
 					SoundIsPlaying := false;
 				end else begin
-					if SoundBuffer[SoundBufferPos] = #0 then
-						NoSound
-					else if SoundBuffer[SoundBufferPos] < #240 then
+					if (SoundBuffer[SoundBufferPos] >= #16) and (SoundBuffer[SoundBufferPos] < #112) then
 						Sound(SoundFreqTable[Ord(SoundBuffer[SoundBufferPos])])
+					else if (SoundBuffer[SoundBufferPos] >= #240) and (SoundBuffer[SoundBufferPos] < #250) then
+						SoundPlayDrum(SoundDrumTable[Ord(SoundBuffer[SoundBufferPos]) - 240])
 					else
-						SoundPlayDrum(SoundDrumTable[Ord(SoundBuffer[SoundBufferPos]) - 240]);
+						NoSound;
 					Inc(SoundBufferPos);
 
 					SoundDurationCounter := SoundDurationMultiplier * Ord(SoundBuffer[SoundBufferPos]);
@@ -339,8 +294,6 @@ function SoundParse(input: string): stri
 	end;
 
 begin
-	SoundInitFreqTable;
-	SoundInitDrumTable;
 	SoundTimeCheckCounter := 36;
 	UseSystemTimeForElapsed := false;
 	TimerTicks := 0;
